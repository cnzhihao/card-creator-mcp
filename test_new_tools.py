#!/usr/bin/env python3
"""
测试新的DocGenius工具功能
"""
import asyncio
import os
from pathlib import Path

# 测试用的HTML内容
TEST_HTML = """<!DOCTYPE html>
<html lang="zh">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>测试文档</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }
        .header {
            text-align: center;
            margin-bottom: 30px;
        }
        .content {
            background: rgba(255, 255, 255, 0.1);
            padding: 20px;
            border-radius: 10px;
            backdrop-filter: blur(10px);
        }
        .footer {
            text-align: center;
            margin-top: 30px;
            opacity: 0.8;
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>🎨 DocGenius 测试文档</h1>
        <p>这是一个用于测试新工具功能的HTML文档</p>
    </div>
    
    <div class="content">
        <h2>✨ 功能特色</h2>
        <ul>
            <li>📝 HTML文件保存功能</li>
            <li>🖼️ 图片生成功能</li>
            <li>📁 基于模板的文件组织</li>
            <li>🌍 多语言支持</li>
        </ul>
        
        <h2>🔧 技术栈</h2>
        <p>本项目使用以下技术：</p>
        <ul>
            <li>Python + FastMCP</li>
            <li>Playwright 自动化</li>
            <li>aiofiles 异步文件操作</li>
            <li>HTML + CSS 响应式设计</li>
        </ul>
    </div>
    
    <div class="footer">
        <p>Generated by DocGenius © 2025</p>
    </div>
</body>
</html>"""

async def test_tools():
    """测试新工具功能"""
    print("🧪 开始测试 DocGenius 新工具功能...")
    
    # 测试参数
    template_name = "test"
    file_name = "test_document"
    width = 1200
    height = 800
    
    print(f"\n📋 测试参数:")
    print(f"  模板名称: {template_name}")
    print(f"  文件名称: {file_name}")
    print(f"  图片尺寸: {width}x{height}")
    print(f"  当前工作目录: {Path.cwd()}")
    
    # 导入工具函数
    try:
        from main_service import _save_html_file, _create_image_from_html_file
        print("\n✅ 成功导入工具函数")
    except ImportError as e:
        print(f"\n❌ 导入工具函数失败: {e}")
        return
    
    # 测试1: 保存HTML文件
    print("\n📝 测试1: 保存HTML文件...")
    try:
        html_path = await _save_html_file(TEST_HTML, template_name, file_name)
        print(f"✅ HTML文件保存成功: {html_path}")
        
        # 验证文件是否存在
        if Path(html_path).exists():
            file_size = Path(html_path).stat().st_size
            print(f"✅ 文件验证通过，大小: {file_size} bytes")
        else:
            print("❌ 文件验证失败，文件不存在")
            return
            
    except Exception as e:
        print(f"❌ HTML文件保存失败: {e}")
        return
    
    # 测试2: 生成图片
    print("\n🖼️ 测试2: 生成图片...")
    try:
        jpg_path = await _create_image_from_html_file(html_path, width, height)
        print(f"✅ 图片生成成功: {jpg_path}")
        
        # 验证图片文件是否存在
        if Path(jpg_path).exists():
            file_size = Path(jpg_path).stat().st_size
            print(f"✅ 图片验证通过，大小: {file_size} bytes")
        else:
            print("❌ 图片验证失败，文件不存在")
            return
            
    except Exception as e:
        print(f"❌ 图片生成失败: {e}")
        return
    
    # 测试3: 环境变量测试
    print("\n🌍 测试3: 环境变量支持...")
    original_env = os.getenv('DOCGENIUS_TEMPLATES_DIR')
    
    # 设置测试环境变量
    test_templates_dir = Path.cwd() / "test_templates"
    os.environ['DOCGENIUS_TEMPLATES_DIR'] = str(test_templates_dir)
    
    # 重新导入以测试环境变量
    try:
        import importlib
        import main_service
        importlib.reload(main_service)
        
        print(f"✅ 环境变量设置成功: {test_templates_dir}")
        print(f"✅ 新的模板目录: {main_service.TEMPLATE_DIR}")
        
    except Exception as e:
        print(f"❌ 环境变量测试失败: {e}")
    finally:
        # 恢复原始环境变量
        if original_env:
            os.environ['DOCGENIUS_TEMPLATES_DIR'] = original_env
        else:
            os.environ.pop('DOCGENIUS_TEMPLATES_DIR', None)
    
    # 测试完成
    print("\n🎉 所有测试完成!")
    print(f"\n📁 生成的文件:")
    print(f"  HTML: {html_path}")
    print(f"  JPG:  {jpg_path}")
    
    print(f"\n📂 输出目录结构:")
    output_dir = Path.cwd() / "pic" / template_name
    if output_dir.exists():
        for file in output_dir.iterdir():
            print(f"  {file.name} ({file.stat().st_size} bytes)")

if __name__ == "__main__":
    asyncio.run(test_tools()) 